
H:/ECSE 324/G28_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 78 08 00 00 7c 08 00 00 80 08 00 00     @...x...|.......
  30:	84 08 00 00 74 08 00 00 88 08 00 00 8c 08 00 00     ....t...........

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001cd 	bl	810 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000974 	.word	0x00000974

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000db0 	.word	0x00000db0

00000124 <__cs3_heap_start_ptr>:
 124:	00000dd8 	.word	0x00000dd8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000db8 	.word	0x00000db8
 170:	00000dbb 	.word	0x00000dbb
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000db8 	.word	0x00000db8
 1bc:	00000db8 	.word	0x00000db8
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000db8 	.word	0x00000db8
 200:	00000000 	.word	0x00000000
 204:	00000918 	.word	0x00000918

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000918 	.word	0x00000918
 250:	00000dbc 	.word	0x00000dbc
 254:	00000978 	.word	0x00000978
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/LEDs.h"			
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main () {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16

	while(1) {											
		int switches = read_slider_switches_ASM();  	//Read switches
 268:	eb000023 	bl	2fc <read_slider_switches_ASM>
 26c:	e50b0008 	str	r0, [r11, #-8]
		write_LEDs_ASM(switches);						//Write value of switches in LEDs to turn on associated ones
 270:	e51b0008 	ldr	r0, [r11, #-8]
 274:	eb00001c 	bl	2ec <write_LEDs_ASM>
		if(0x200 & switches){							//If the 9nth switch is on, clear everything
 278:	e51b3008 	ldr	r3, [r11, #-8]
 27c:	e2033c02 	and	r3, r3, #512	; 0x200
 280:	e3530000 	cmp	r3, #0
 284:	0a000002 	beq	294 <main+0x38>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 288:	e3a0003f 	mov	r0, #63	; 0x3f
 28c:	eb00001e 	bl	30c <HEX_clear_ASM>
			int number = 0xF & switches;				//Read number to be displayed
			int display = 0xF & read_PB_data_ASM();		//Check which display to use
			HEX_write_ASM(display, number);				//Write value on used display
			HEX_flood_ASM(HEX4 | HEX5);					//Turn 4 and 5 on always
		}
	}
 290:	eafffff4 	b	268 <main+0xc>
		int switches = read_slider_switches_ASM();  	//Read switches
		write_LEDs_ASM(switches);						//Write value of switches in LEDs to turn on associated ones
		if(0x200 & switches){							//If the 9nth switch is on, clear everything
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
		} else {
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);	//clear 0, 1, 2, 3 
 294:	e3a0000f 	mov	r0, #15
 298:	eb00001b 	bl	30c <HEX_clear_ASM>
			int number = 0xF & switches;				//Read number to be displayed
 29c:	e51b3008 	ldr	r3, [r11, #-8]
 2a0:	e203300f 	and	r3, r3, #15
 2a4:	e50b300c 	str	r3, [r11, #-12]
			int display = 0xF & read_PB_data_ASM();		//Check which display to use
 2a8:	eb000067 	bl	44c <read_PB_data_ASM>
 2ac:	e1a03000 	mov	r3, r0
 2b0:	e203300f 	and	r3, r3, #15
 2b4:	e50b3010 	str	r3, [r11, #-16]
			HEX_write_ASM(display, number);				//Write value on used display
 2b8:	e51b3010 	ldr	r3, [r11, #-16]
 2bc:	e6ef2073 	uxtb	r2, r3
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e6ef3073 	uxtb	r3, r3
 2c8:	e1a00002 	mov	r0, r2
 2cc:	e1a01003 	mov	r1, r3
 2d0:	eb00003d 	bl	3cc <HEX_write_ASM>
			HEX_flood_ASM(HEX4 | HEX5);					//Turn 4 and 5 on always
 2d4:	e3a00030 	mov	r0, #48	; 0x30
 2d8:	eb000023 	bl	36c <HEX_flood_ASM>
		}
	}
 2dc:	eaffffe1 	b	268 <main+0xc>

000002e0 <read_LEDs_ASM>:
	.global read_LEDs_ASM
	


read_LEDs_ASM:
	LDR R1, =LED_BASE
 2e0:	e59f1010 	ldr	r1, [pc, #16]	; 2f8 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
 2e4:	e5910000 	ldr	r0, [r1]
	BX LR
 2e8:	e12fff1e 	bx	lr

000002ec <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LED_BASE
 2ec:	e59f1004 	ldr	r1, [pc, #4]	; 2f8 <write_LEDs_ASM+0xc>
	STR R0, [R1]
 2f0:	e5810000 	str	r0, [r1]
	BX LR
 2f4:	e12fff1e 	bx	lr
	.global read_LEDs_ASM
	


read_LEDs_ASM:
	LDR R1, =LED_BASE
 2f8:	ff200000 	.word	0xff200000

000002fc <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 2fc:	e59f1004 	ldr	r1, [pc, #4]	; 308 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 300:	e5910000 	ldr	r0, [r1]
	BX LR
 304:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 308:	ff200040 	.word	0xff200040

0000030c <HEX_clear_ASM>:
	.equ HEX_BASE2, 0xFF200030
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 30c:	e59f112c 	ldr	r1, [pc, #300]	; 440 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 310:	e59f212c 	ldr	r2, [pc, #300]	; 444 <HEX_VAL+0x14>
				MOV R3, #6				//Loop counter
 314:	e3a03006 	mov	r3, #6
				MOV R4, #1				//Control that compares with R0 to check if display needs to be changed
 318:	e3a04001 	mov	r4, #1
				MOV R6, #0				//Use 0 to clear the needed byte
 31c:	e3a06000 	mov	r6, #0

00000320 <LOOP_CLEAR_03>:

LOOP_CLEAR_03:	CMP R3, #2				//Checks if still in lower displays
 320:	e3530002 	cmp	r3, #2
				BEQ LOOP_CLEAR_45		//If not go to upper displays
 324:	0a000006 	beq	344 <LOOP_CLEAR_45>
				ANDS R5, R4, R0 		//Compare R0 with control to know if checked desplay needs to be cleared
 328:	e0145000 	ands	r5, r4, r0
				BEQ CLEAR_03			//If = 0, skip clearing
 32c:	0a000000 	beq	334 <CLEAR_03>
				STRB R6, [R1]			//Else, insert 1 byte of 0 at memory location R1	
 330:	e5c16000 	strb	r6, [r1]

00000334 <CLEAR_03>:

CLEAR_03:		LSL R4, #1				//Shift R4 to check next display
 334:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			//Increment R1 to get the adress if next display
 338:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			//Decrement the loop counter
 33c:	e2533001 	subs	r3, r3, #1
				BGT LOOP_CLEAR_03		//Keep looping in lower displays
 340:	cafffff6 	bgt	320 <LOOP_CLEAR_03>

00000344 <LOOP_CLEAR_45>:

LOOP_CLEAR_45:	CMP R3, #0				//Check if finished with all displays
 344:	e3530000 	cmp	r3, #0
				BEQ END_CLEAR			//If so, end
 348:	0a000006 	beq	368 <END_CLEAR>
				ANDS R5, R4, R0			//Compare R0 with control to know if checked desplay needs to be cleared
 34c:	e0145000 	ands	r5, r4, r0
				BEQ CLEAR_45			//If = 0, skip clearing
 350:	0a000000 	beq	358 <CLEAR_45>
				STRB R6, [R2]			//Else, insert 1 byte of 0 at memory location R1	
 354:	e5c26000 	strb	r6, [r2]

00000358 <CLEAR_45>:

CLEAR_45:		LSL R4, #1				//Shift R4 to check next display
 358:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			//Increment R2 to get the adress if next display
 35c:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1			//Decrement loop counter
 360:	e2533001 	subs	r3, r3, #1
				BGT LOOP_CLEAR_45		//Keep looping in upper displays
 364:	cafffff6 	bgt	344 <LOOP_CLEAR_45>

00000368 <END_CLEAR>:

END_CLEAR:		BX LR
 368:	e12fff1e 	bx	lr

0000036c <HEX_flood_ASM>:

HEX_flood_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 36c:	e59f10cc 	ldr	r1, [pc, #204]	; 440 <HEX_VAL+0x10>
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 370:	e59f20cc 	ldr	r2, [pc, #204]	; 444 <HEX_VAL+0x14>
				MOV R3, #6				//Loop counter
 374:	e3a03006 	mov	r3, #6
				MOV R4, #1				//Control that compares with R0 to check if display needs to be changed
 378:	e3a04001 	mov	r4, #1
				MOV R6, #0xFF			//Use R6 to flood desired 8 bits
 37c:	e3a060ff 	mov	r6, #255	; 0xff

00000380 <LOOP_FLOOD_03>:

LOOP_FLOOD_03:	CMP R3, #2				//Checks if still in lower displays
 380:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP_F			//If not go to upper displays
 384:	0a000006 	beq	3a4 <LOOP_TOP_F>
				ANDS R5, R4, R0 		//Check which display to flood
 388:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM_F			//If = 0, no need to flood
 38c:	0a000000 	beq	394 <BOTTOM_F>
				STRB R6, [R1]			//Else, flood display being checked
 390:	e5c16000 	strb	r6, [r1]

00000394 <BOTTOM_F>:

BOTTOM_F:		LSL R4, #1				//Shit control by 1 to check next display
 394:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			//Point to the adress of next display
 398:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			//Decrement loop counter
 39c:	e2533001 	subs	r3, r3, #1
				BGT LOOP_FLOOD_03		//Loop back to lower displays
 3a0:	cafffff6 	bgt	380 <LOOP_FLOOD_03>

000003a4 <LOOP_TOP_F>:

LOOP_TOP_F:		CMP R3, #0				//Check if finished checking all displays
 3a4:	e3530000 	cmp	r3, #0
				BEQ END_FLOOD			//If so, end
 3a8:	0a000006 	beq	3c8 <END_FLOOD>
				ANDS R5, R4, R0			//Else, check if display needs to be flooded
 3ac:	e0145000 	ands	r5, r4, r0
				BEQ TOP_F				//If = 0, no need to be flooded
 3b0:	0a000000 	beq	3b8 <TOP_F>
				STRB R6, [R2]			//Else, flood designated upper display
 3b4:	e5c26000 	strb	r6, [r2]

000003b8 <TOP_F>:

TOP_F:			LSL R4, #1				//Shift control to point to next display
 3b8:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			//Point to the adress of next display
 3bc:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1			//Decrement counter
 3c0:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP_F			//Loop back to upper displays
 3c4:	cafffff6 	bgt	3a4 <LOOP_TOP_F>

000003c8 <END_FLOOD>:

END_FLOOD:		BX LR
 3c8:	e12fff1e 	bx	lr

000003cc <HEX_write_ASM>:

HEX_write_ASM:	LDR R2, =HEX_BASE1		//Contains adresses for HEX0-3
 3cc:	e59f206c 	ldr	r2, [pc, #108]	; 440 <HEX_VAL+0x10>
				LDR R3, =HEX_BASE2		//Contains adresses for HEX4-5
 3d0:	e59f306c 	ldr	r3, [pc, #108]	; 444 <HEX_VAL+0x14>
				LDR R7, =HEX_VAL		//Start adress of the list of all values for 16 hex displays
 3d4:	e59f706c 	ldr	r7, [pc, #108]	; 448 <HEX_VAL+0x18>
				LDRB R8, [R7, R1]		//Load corresponding value of val in R8
 3d8:	e7d78001 	ldrb	r8, [r7, r1]
				MOV R4, #6				//Loop counter
 3dc:	e3a04006 	mov	r4, #6
				MOV R5, #1				//Control which compares with R0 to check which hex to change
 3e0:	e3a05001 	mov	r5, #1

000003e4 <LOOP_W_LOWER>:

LOOP_W_LOWER:	CMP R4, #2				//Check if still in lower displays
 3e4:	e3540002 	cmp	r4, #2
				BEQ LOOP_W_UPPER		//If not go to upper displays
 3e8:	0a000006 	beq	408 <LOOP_W_UPPER>
				ANDS R6, R5, R0 		//Compare R0 to control to know if selected bit needs to be changed
 3ec:	e0156000 	ands	r6, r5, r0
				BEQ W_LOWER				//If = 0, no changes
 3f0:	0a000000 	beq	3f8 <W_LOWER>
				STRB R8, [R2]			//Else, store val in corresponding display address
 3f4:	e5c28000 	strb	r8, [r2]

000003f8 <W_LOWER>:

W_LOWER:		LSL R5, #1				//Shift control to check next display
 3f8:	e1a05085 	lsl	r5, r5, #1
				ADD R2, R2, #1			//Increment adress to next display
 3fc:	e2822001 	add	r2, r2, #1
				SUBS R4, R4, #1			//Decrement loop counter 
 400:	e2544001 	subs	r4, r4, #1
				BGT LOOP_W_LOWER		//Go back to lower displays
 404:	cafffff6 	bgt	3e4 <LOOP_W_LOWER>

00000408 <LOOP_W_UPPER>:

LOOP_W_UPPER:	CMP R4, #0				//Check f all displays have been checked
 408:	e3540000 	cmp	r4, #0
				BEQ END_W				//If so, end
 40c:	0a000006 	beq	42c <END_W>
				ANDS R6, R5, R0			//Else, check if current display needs to be changed
 410:	e0156000 	ands	r6, r5, r0
				BEQ W_UPPER				//If not, no changes
 414:	0a000000 	beq	41c <W_UPPER>
				STRB R8, [R3]			//If so, change
 418:	e5c38000 	strb	r8, [r3]

0000041c <W_UPPER>:

W_UPPER:		LSL R5, #1				//Shift control to check next display
 41c:	e1a05085 	lsl	r5, r5, #1
				ADD R3, R3, #1			//Increment adress to next display
 420:	e2833001 	add	r3, r3, #1
				SUBS R4, R4, #1			//Decrement loop counter
 424:	e2544001 	subs	r4, r4, #1
				BGT LOOP_W_UPPER		//Go back to upper displays
 428:	cafffff6 	bgt	408 <LOOP_W_UPPER>

0000042c <END_W>:

END_W:			BX LR
 42c:	e12fff1e 	bx	lr

00000430 <HEX_VAL>:
 430:	4f5b063f 	.word	0x4f5b063f
 434:	077d6d66 	.word	0x077d6d66
 438:	7f77677f 	.word	0x7f77677f
 43c:	71793f39 	.word	0x71793f39
	.equ HEX_BASE2, 0xFF200030
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 440:	ff200020 	.word	0xff200020
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 444:	ff200030 	.word	0xff200030

END_FLOOD:		BX LR

HEX_write_ASM:	LDR R2, =HEX_BASE1		//Contains adresses for HEX0-3
				LDR R3, =HEX_BASE2		//Contains adresses for HEX4-5
				LDR R7, =HEX_VAL		//Start adress of the list of all values for 16 hex displays
 448:	00000430 	.word	0x00000430

0000044c <read_PB_data_ASM>:
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM

read_PB_data_ASM:				
			LDR R1, =PB_DATA	//Load adress of push button
 44c:	e59f1084 	ldr	r1, [pc, #132]	; 4d8 <disable_PB_INT_ASM+0x14>
			LDR R0, [R1]		//Load data from adress in R0 
 450:	e5910000 	ldr	r0, [r1]
			AND R0, R0, #0xF	//Return only needed bits
 454:	e200000f 	and	r0, r0, #15
			BX LR				//Return R0
 458:	e12fff1e 	bx	lr

0000045c <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:			
			LDR R1, =PB_DATA	//Load adress of push button
 45c:	e59f1074 	ldr	r1, [pc, #116]	; 4d8 <disable_PB_INT_ASM+0x14>
			LDR R1, [R1]		//Load data from adress in R1
 460:	e5911000 	ldr	r1, [r1]
			AND R2, R1, R0		//AND R0 and R1 to check if specific button is pressed 
 464:	e0012000 	and	r2, r1, r0
			CMP R2, R0			//Compare with R0 to check if button is pressed
 468:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		//If = , checked button is pressed
 46c:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		//If !=, checked button is not pressed
 470:	13a00000 	movne	r0, #0
			BX LR
 474:	e12fff1e 	bx	lr

00000478 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 478:	e59f105c 	ldr	r1, [pc, #92]	; 4dc <disable_PB_INT_ASM+0x18>
			LDR R0, [R1]		//Load data into R0
 47c:	e5910000 	ldr	r0, [r1]
			AND R0, R0, #0xF	//Return only needed bits
 480:	e200000f 	and	r0, r0, #15
			BX LR 				//Return R0
 484:	e12fff1e 	bx	lr

00000488 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:			
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 488:	e59f104c 	ldr	r1, [pc, #76]	; 4dc <disable_PB_INT_ASM+0x18>
			LDR R1, [R1]		//Load value of R1
 48c:	e5911000 	ldr	r1, [r1]
			AND R2, R1, R0		//AND R0 and R1 to check if specific button is pressed 
 490:	e0012000 	and	r2, r1, r0
			CMP R2, R0			//Compare with R0 to check if button is pressed
 494:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		//If = , checked button is pressed
 498:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		//If !=, checked button is not pressed
 49c:	13a00000 	movne	r0, #0
			BX LR
 4a0:	e12fff1e 	bx	lr

000004a4 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:				
			LDR R1, =PB_EDGECAP //Load adress of edgecap
 4a4:	e59f1030 	ldr	r1, [pc, #48]	; 4dc <disable_PB_INT_ASM+0x18>
			MOV R0, #0xF		//Move all 1s in R0
 4a8:	e3a0000f 	mov	r0, #15
			STR R0, [R1]		//Store all 1s in adress of edgecap to reset
 4ac:	e5810000 	str	r0, [r1]
			BX LR		
 4b0:	e12fff1e 	bx	lr

000004b4 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 4b4:	e59f1024 	ldr	r1, [pc, #36]	; 4e0 <disable_PB_INT_ASM+0x1c>
			AND R2, R0, #0xF	//Return only needed bits
 4b8:	e200200f 	and	r2, r0, #15
			STR R2, [R1]		//Store return value in adress
 4bc:	e5812000 	str	r2, [r1]
			BX LR			
 4c0:	e12fff1e 	bx	lr

000004c4 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 4c4:	e59f1014 	ldr	r1, [pc, #20]	; 4e0 <disable_PB_INT_ASM+0x1c>
			LDR R2, [R1]		//Load value at adress in R2
 4c8:	e5912000 	ldr	r2, [r1]
			BIC R1, R1, R0		//Disable wanted button
 4cc:	e1c11000 	bic	r1, r1, r0
			STR R1, [R2]		//Store value back in adress
 4d0:	e5821000 	str	r1, [r2]
			BX LR		
 4d4:	e12fff1e 	bx	lr
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM

read_PB_data_ASM:				
			LDR R1, =PB_DATA	//Load adress of push button
 4d8:	ff200050 	.word	0xff200050
			MOVEQ R0, #1		//If = , checked button is pressed
			MOVNE R0, #0		//If !=, checked button is not pressed
			BX LR

read_PB_edgecap_ASM:				
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 4dc:	ff20005c 	.word	0xff20005c
			MOV R0, #0xF		//Move all 1s in R0
			STR R0, [R1]		//Store all 1s in adress of edgecap to reset
			BX LR		

enable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 4e0:	ff200058 	.word	0xff200058

000004e4 <atexit>:
 4e4:	e1a01000 	mov	r1, r0
 4e8:	e3a00000 	mov	r0, #0
 4ec:	e92d4008 	push	{r3, lr}
 4f0:	e1a02000 	mov	r2, r0
 4f4:	e1a03000 	mov	r3, r0
 4f8:	eb00000e 	bl	538 <__register_exitproc>
 4fc:	e8bd4008 	pop	{r3, lr}
 500:	e12fff1e 	bx	lr

00000504 <exit>:
 504:	e92d4008 	push	{r3, lr}
 508:	e3a01000 	mov	r1, #0
 50c:	e1a04000 	mov	r4, r0
 510:	eb000045 	bl	62c <__call_exitprocs>
 514:	e59f3018 	ldr	r3, [pc, #24]	; 534 <exit+0x30>
 518:	e5930000 	ldr	r0, [r3]
 51c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 520:	e3530000 	cmp	r3, #0
 524:	11a0e00f 	movne	lr, pc
 528:	112fff13 	bxne	r3
 52c:	e1a00004 	mov	r0, r4
 530:	eb0000c9 	bl	85c <_exit>
 534:	0000091c 	.word	0x0000091c

00000538 <__register_exitproc>:
 538:	e59fc0e4 	ldr	r12, [pc, #228]	; 624 <__register_exitproc+0xec>
 53c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 540:	e59c4000 	ldr	r4, [r12]
 544:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 548:	e35c0000 	cmp	r12, #0
 54c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 550:	e59c5004 	ldr	r5, [r12, #4]
 554:	0584c148 	streq	r12, [r4, #328]	; 0x148
 558:	e355001f 	cmp	r5, #31
 55c:	e24dd010 	sub	sp, sp, #16
 560:	e1a06000 	mov	r6, r0
 564:	da000015 	ble	5c0 <__register_exitproc+0x88>
 568:	e59f00b8 	ldr	r0, [pc, #184]	; 628 <__register_exitproc+0xf0>
 56c:	e3500000 	cmp	r0, #0
 570:	1a000001 	bne	57c <__register_exitproc+0x44>
 574:	e3e00000 	mvn	r0, #0
 578:	ea000018 	b	5e0 <__register_exitproc+0xa8>
 57c:	e3a00e19 	mov	r0, #400	; 0x190
 580:	e58d100c 	str	r1, [sp, #12]
 584:	e58d2008 	str	r2, [sp, #8]
 588:	e58d3004 	str	r3, [sp, #4]
 58c:	e320f000 	nop	{0}
 590:	e250c000 	subs	r12, r0, #0
 594:	e59d100c 	ldr	r1, [sp, #12]
 598:	e59d2008 	ldr	r2, [sp, #8]
 59c:	e59d3004 	ldr	r3, [sp, #4]
 5a0:	0afffff3 	beq	574 <__register_exitproc+0x3c>
 5a4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 5a8:	e3a00000 	mov	r0, #0
 5ac:	e58c0004 	str	r0, [r12, #4]
 5b0:	e58c5000 	str	r5, [r12]
 5b4:	e584c148 	str	r12, [r4, #328]	; 0x148
 5b8:	e58c0188 	str	r0, [r12, #392]	; 0x188
 5bc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 5c0:	e3560000 	cmp	r6, #0
 5c4:	e59c4004 	ldr	r4, [r12, #4]
 5c8:	1a000007 	bne	5ec <__register_exitproc+0xb4>
 5cc:	e2843002 	add	r3, r4, #2
 5d0:	e2844001 	add	r4, r4, #1
 5d4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5d8:	e58c4004 	str	r4, [r12, #4]
 5dc:	e3a00000 	mov	r0, #0
 5e0:	e28dd010 	add	sp, sp, #16
 5e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5e8:	e12fff1e 	bx	lr
 5ec:	e3a00001 	mov	r0, #1
 5f0:	e1a00410 	lsl	r0, r0, r4
 5f4:	e08c8104 	add	r8, r12, r4, lsl #2
 5f8:	e3560002 	cmp	r6, #2
 5fc:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 600:	e5883108 	str	r3, [r8, #264]	; 0x108
 604:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 608:	e1877000 	orr	r7, r7, r0
 60c:	01830000 	orreq	r0, r3, r0
 610:	e1a05008 	mov	r5, r8
 614:	e5882088 	str	r2, [r8, #136]	; 0x88
 618:	e58c7188 	str	r7, [r12, #392]	; 0x188
 61c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 620:	eaffffe9 	b	5cc <__register_exitproc+0x94>
 624:	0000091c 	.word	0x0000091c
 628:	00000000 	.word	0x00000000

0000062c <__call_exitprocs>:
 62c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 630:	e59f3168 	ldr	r3, [pc, #360]	; 7a0 <__call_exitprocs+0x174>
 634:	e5933000 	ldr	r3, [r3]
 638:	e24dd014 	sub	sp, sp, #20
 63c:	e58d3004 	str	r3, [sp, #4]
 640:	e2833f52 	add	r3, r3, #328	; 0x148
 644:	e58d0008 	str	r0, [sp, #8]
 648:	e58d300c 	str	r3, [sp, #12]
 64c:	e1a07001 	mov	r7, r1
 650:	e3a08001 	mov	r8, #1
 654:	e59d3004 	ldr	r3, [sp, #4]
 658:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 65c:	e3560000 	cmp	r6, #0
 660:	e59db00c 	ldr	r11, [sp, #12]
 664:	0a000033 	beq	738 <__call_exitprocs+0x10c>
 668:	e5965004 	ldr	r5, [r6, #4]
 66c:	e2554001 	subs	r4, r5, #1
 670:	5286a088 	addpl	r10, r6, #136	; 0x88
 674:	5285501f 	addpl	r5, r5, #31
 678:	508a5105 	addpl	r5, r10, r5, lsl #2
 67c:	5a000007 	bpl	6a0 <__call_exitprocs+0x74>
 680:	ea000029 	b	72c <__call_exitprocs+0x100>
 684:	e5953000 	ldr	r3, [r5]
 688:	e1530007 	cmp	r3, r7
 68c:	0a000005 	beq	6a8 <__call_exitprocs+0x7c>
 690:	e2444001 	sub	r4, r4, #1
 694:	e3740001 	cmn	r4, #1
 698:	e2455004 	sub	r5, r5, #4
 69c:	0a000022 	beq	72c <__call_exitprocs+0x100>
 6a0:	e3570000 	cmp	r7, #0
 6a4:	1afffff6 	bne	684 <__call_exitprocs+0x58>
 6a8:	e5963004 	ldr	r3, [r6, #4]
 6ac:	e06a2005 	rsb	r2, r10, r5
 6b0:	e2433001 	sub	r3, r3, #1
 6b4:	e0862002 	add	r2, r6, r2
 6b8:	e1530004 	cmp	r3, r4
 6bc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 6c0:	13a01000 	movne	r1, #0
 6c4:	05864004 	streq	r4, [r6, #4]
 6c8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6cc:	e3530000 	cmp	r3, #0
 6d0:	0affffee 	beq	690 <__call_exitprocs+0x64>
 6d4:	e1a02418 	lsl	r2, r8, r4
 6d8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6dc:	e1120001 	tst	r2, r1
 6e0:	e5969004 	ldr	r9, [r6, #4]
 6e4:	0a000016 	beq	744 <__call_exitprocs+0x118>
 6e8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6ec:	e1120001 	tst	r2, r1
 6f0:	1a000016 	bne	750 <__call_exitprocs+0x124>
 6f4:	e59d0008 	ldr	r0, [sp, #8]
 6f8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6fc:	e1a0e00f 	mov	lr, pc
 700:	e12fff13 	bx	r3
 704:	e5963004 	ldr	r3, [r6, #4]
 708:	e1530009 	cmp	r3, r9
 70c:	1affffd0 	bne	654 <__call_exitprocs+0x28>
 710:	e59b3000 	ldr	r3, [r11]
 714:	e1530006 	cmp	r3, r6
 718:	1affffcd 	bne	654 <__call_exitprocs+0x28>
 71c:	e2444001 	sub	r4, r4, #1
 720:	e3740001 	cmn	r4, #1
 724:	e2455004 	sub	r5, r5, #4
 728:	1affffdc 	bne	6a0 <__call_exitprocs+0x74>
 72c:	e59f1070 	ldr	r1, [pc, #112]	; 7a4 <__call_exitprocs+0x178>
 730:	e3510000 	cmp	r1, #0
 734:	1a000009 	bne	760 <__call_exitprocs+0x134>
 738:	e28dd014 	add	sp, sp, #20
 73c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 740:	e12fff1e 	bx	lr
 744:	e1a0e00f 	mov	lr, pc
 748:	e12fff13 	bx	r3
 74c:	eaffffec 	b	704 <__call_exitprocs+0xd8>
 750:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 754:	e1a0e00f 	mov	lr, pc
 758:	e12fff13 	bx	r3
 75c:	eaffffe8 	b	704 <__call_exitprocs+0xd8>
 760:	e5963004 	ldr	r3, [r6, #4]
 764:	e3530000 	cmp	r3, #0
 768:	e5963000 	ldr	r3, [r6]
 76c:	1a000008 	bne	794 <__call_exitprocs+0x168>
 770:	e3530000 	cmp	r3, #0
 774:	0a000006 	beq	794 <__call_exitprocs+0x168>
 778:	e1a00006 	mov	r0, r6
 77c:	e58b3000 	str	r3, [r11]
 780:	e320f000 	nop	{0}
 784:	e59b6000 	ldr	r6, [r11]
 788:	e3560000 	cmp	r6, #0
 78c:	1affffb5 	bne	668 <__call_exitprocs+0x3c>
 790:	eaffffe8 	b	738 <__call_exitprocs+0x10c>
 794:	e1a0b006 	mov	r11, r6
 798:	e1a06003 	mov	r6, r3
 79c:	eafffff9 	b	788 <__call_exitprocs+0x15c>
 7a0:	0000091c 	.word	0x0000091c
 7a4:	00000000 	.word	0x00000000

000007a8 <register_fini>:
 7a8:	e92d4008 	push	{r3, lr}
 7ac:	e59f3010 	ldr	r3, [pc, #16]	; 7c4 <register_fini+0x1c>
 7b0:	e3530000 	cmp	r3, #0
 7b4:	159f000c 	ldrne	r0, [pc, #12]	; 7c8 <register_fini+0x20>
 7b8:	1bffff49 	blne	4e4 <atexit>
 7bc:	e8bd4008 	pop	{r3, lr}
 7c0:	e12fff1e 	bx	lr
 7c4:	00000944 	.word	0x00000944
 7c8:	000007cc 	.word	0x000007cc

000007cc <__libc_fini_array>:
 7cc:	e92d4038 	push	{r3, r4, r5, lr}
 7d0:	e59f5030 	ldr	r5, [pc, #48]	; 808 <__libc_fini_array+0x3c>
 7d4:	e59f4030 	ldr	r4, [pc, #48]	; 80c <__libc_fini_array+0x40>
 7d8:	e0654004 	rsb	r4, r5, r4
 7dc:	e1b04144 	asrs	r4, r4, #2
 7e0:	10855104 	addne	r5, r5, r4, lsl #2
 7e4:	0a000004 	beq	7fc <__libc_fini_array+0x30>
 7e8:	e5353004 	ldr	r3, [r5, #-4]!
 7ec:	e1a0e00f 	mov	lr, pc
 7f0:	e12fff13 	bx	r3
 7f4:	e2544001 	subs	r4, r4, #1
 7f8:	1afffffa 	bne	7e8 <__libc_fini_array+0x1c>
 7fc:	eb000050 	bl	944 <__libc_fini>
 800:	e8bd4038 	pop	{r3, r4, r5, lr}
 804:	e12fff1e 	bx	lr
 808:	0000095c 	.word	0x0000095c
 80c:	00000960 	.word	0x00000960

00000810 <__cs3_premain>:
 810:	e92d4008 	push	{r3, lr}
 814:	eb00001d 	bl	890 <__libc_init_array>
 818:	e59f3030 	ldr	r3, [pc, #48]	; 850 <__cs3_premain+0x40>
 81c:	e3530000 	cmp	r3, #0
 820:	15930000 	ldrne	r0, [r3]
 824:	01a00003 	moveq	r0, r3
 828:	e59f3024 	ldr	r3, [pc, #36]	; 854 <__cs3_premain+0x44>
 82c:	e3530000 	cmp	r3, #0
 830:	15931000 	ldrne	r1, [r3]
 834:	01a01003 	moveq	r1, r3
 838:	e3a02000 	mov	r2, #0
 83c:	ebfffe86 	bl	25c <main>
 840:	e59f3010 	ldr	r3, [pc, #16]	; 858 <__cs3_premain+0x48>
 844:	e3530000 	cmp	r3, #0
 848:	1bffff2d 	blne	504 <exit>
 84c:	eafffffe 	b	84c <__cs3_premain+0x3c>
	...
 858:	00000504 	.word	0x00000504

0000085c <_exit>:
 85c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 860:	e3a00018 	mov	r0, #24
 864:	e59f1004 	ldr	r1, [pc, #4]	; 870 <_exit+0x14>
 868:	ef123456 	svc	0x00123456
 86c:	eafffffe 	b	86c <_exit+0x10>
 870:	00020026 	.word	0x00020026

00000874 <__cs3_isr_interrupt>:
 874:	eafffffe 	b	874 <__cs3_isr_interrupt>

00000878 <__cs3_isr_undef>:
 878:	eafffffe 	b	878 <__cs3_isr_undef>

0000087c <__cs3_isr_swi>:
 87c:	eafffffe 	b	87c <__cs3_isr_swi>

00000880 <__cs3_isr_pabort>:
 880:	eafffffe 	b	880 <__cs3_isr_pabort>

00000884 <__cs3_isr_dabort>:
 884:	eafffffe 	b	884 <__cs3_isr_dabort>

00000888 <__cs3_isr_irq>:
 888:	eafffffe 	b	888 <__cs3_isr_irq>

0000088c <__cs3_isr_fiq>:
 88c:	eafffffe 	b	88c <__cs3_isr_fiq>

00000890 <__libc_init_array>:
 890:	e92d4070 	push	{r4, r5, r6, lr}
 894:	e59f506c 	ldr	r5, [pc, #108]	; 908 <__libc_init_array+0x78>
 898:	e59f606c 	ldr	r6, [pc, #108]	; 90c <__libc_init_array+0x7c>
 89c:	e0656006 	rsb	r6, r5, r6
 8a0:	e1b06146 	asrs	r6, r6, #2
 8a4:	12455004 	subne	r5, r5, #4
 8a8:	13a04000 	movne	r4, #0
 8ac:	0a000005 	beq	8c8 <__libc_init_array+0x38>
 8b0:	e5b53004 	ldr	r3, [r5, #4]!
 8b4:	e2844001 	add	r4, r4, #1
 8b8:	e1a0e00f 	mov	lr, pc
 8bc:	e12fff13 	bx	r3
 8c0:	e1560004 	cmp	r6, r4
 8c4:	1afffff9 	bne	8b0 <__libc_init_array+0x20>
 8c8:	e59f5040 	ldr	r5, [pc, #64]	; 910 <__libc_init_array+0x80>
 8cc:	e59f6040 	ldr	r6, [pc, #64]	; 914 <__libc_init_array+0x84>
 8d0:	e0656006 	rsb	r6, r5, r6
 8d4:	eb000012 	bl	924 <_init>
 8d8:	e1b06146 	asrs	r6, r6, #2
 8dc:	12455004 	subne	r5, r5, #4
 8e0:	13a04000 	movne	r4, #0
 8e4:	0a000005 	beq	900 <__libc_init_array+0x70>
 8e8:	e5b53004 	ldr	r3, [r5, #4]!
 8ec:	e2844001 	add	r4, r4, #1
 8f0:	e1a0e00f 	mov	lr, pc
 8f4:	e12fff13 	bx	r3
 8f8:	e1560004 	cmp	r6, r4
 8fc:	1afffff9 	bne	8e8 <__libc_init_array+0x58>
 900:	e8bd4070 	pop	{r4, r5, r6, lr}
 904:	e12fff1e 	bx	lr
 908:	0000093c 	.word	0x0000093c
 90c:	0000093c 	.word	0x0000093c
 910:	0000093c 	.word	0x0000093c
 914:	00000944 	.word	0x00000944

Disassembly of section .rodata:

0000091c <_global_impure_ptr>:
 91c:	00000988 00000043                       ....C...

00000924 <_init>:
 924:	e1a0c00d 	mov	r12, sp
 928:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 92c:	e24cb004 	sub	r11, r12, #4
 930:	e24bd028 	sub	sp, r11, #40	; 0x28
 934:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 938:	e12fff1e 	bx	lr

0000093c <__init_array_start>:
 93c:	000007a8 	.word	0x000007a8

00000940 <__frame_dummy_init_array_entry>:
 940:	00000208                                ....

00000944 <__libc_fini>:
 944:	e1a0c00d 	mov	r12, sp
 948:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 94c:	e24cb004 	sub	r11, r12, #4
 950:	e24bd028 	sub	sp, r11, #40	; 0x28
 954:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 958:	e12fff1e 	bx	lr

0000095c <__fini_array_start>:
 95c:	000001c4 	.word	0x000001c4

00000960 <__cs3_regions>:
 960:	00000000 	.word	0x00000000
 964:	00000040 	.word	0x00000040
 968:	00000040 	.word	0x00000040
 96c:	00000d78 	.word	0x00000d78
 970:	00000020 	.word	0x00000020

00000974 <__cs3_regions_end>:
 974:	00000000 	.word	0x00000000
