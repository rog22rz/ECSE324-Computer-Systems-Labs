
H:/ECSE 324/G28_Lab3/LEDs.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	f4 09 00 00 00 0a 00 00 0c 0a 00 00 18 0a 00 00     ................
  30:	24 0a 00 00 b8 0e 00 00 9c 08 00 00 30 0a 00 00     $...........0...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00035e 	bl	e54 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000fa0 	.word	0x00000fa0

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000013d8 	.word	0x000013d8

00000124 <__cs3_heap_start_ptr>:
 124:	00001400 	.word	0x00001400

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000013e0 	.word	0x000013e0
 170:	000013e3 	.word	0x000013e3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000013e0 	.word	0x000013e0
 1bc:	000013e0 	.word	0x000013e0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000013e0 	.word	0x000013e0
 200:	00000000 	.word	0x00000000
 204:	00000f44 	.word	0x00000f44

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000f44 	.word	0x00000f44
 250:	000013e4 	.word	0x000013e4
 254:	00000fa0 	.word	0x00000fa0
 258:	00000000 	.word	0x00000000

0000025c <read_LEDs_ASM>:
	.global read_LEDs_ASM
	


read_LEDs_ASM:
	LDR R1, =LED_BASE
 25c:	e59f1010 	ldr	r1, [pc, #16]	; 274 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
 260:	e5910000 	ldr	r0, [r1]
	BX LR
 264:	e12fff1e 	bx	lr

00000268 <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LED_BASE
 268:	e59f1004 	ldr	r1, [pc, #4]	; 274 <write_LEDs_ASM+0xc>
	STR R0, [R1]
 26c:	e5810000 	str	r0, [r1]
	BX LR
 270:	e12fff1e 	bx	lr
	.global read_LEDs_ASM
	


read_LEDs_ASM:
	LDR R1, =LED_BASE
 274:	ff200000 	.word	0xff200000

00000278 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 278:	e59f1004 	ldr	r1, [pc, #4]	; 284 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
 27c:	e5910000 	ldr	r0, [r1]
	BX LR
 280:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
 284:	ff200040 	.word	0xff200040

00000288 <HEX_clear_ASM>:
	.equ HEX_BASE2, 0xFF200030
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 288:	e59f112c 	ldr	r1, [pc, #300]	; 3bc <HEX_VAL+0x10>
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 28c:	e59f212c 	ldr	r2, [pc, #300]	; 3c0 <HEX_VAL+0x14>
				MOV R3, #6				//Loop counter
 290:	e3a03006 	mov	r3, #6
				MOV R4, #1				//Control that compares with R0 to check if display needs to be changed
 294:	e3a04001 	mov	r4, #1
				MOV R6, #0				//Use 0 to clear the needed byte
 298:	e3a06000 	mov	r6, #0

0000029c <LOOP_CLEAR_03>:

LOOP_CLEAR_03:	CMP R3, #2				//Checks if still in lower displays
 29c:	e3530002 	cmp	r3, #2
				BEQ LOOP_CLEAR_45		//If not go to upper displays
 2a0:	0a000006 	beq	2c0 <LOOP_CLEAR_45>
				ANDS R5, R4, R0 		//Compare R0 with control to know if checked desplay needs to be cleared
 2a4:	e0145000 	ands	r5, r4, r0
				BEQ CLEAR_03			//If = 0, skip clearing
 2a8:	0a000000 	beq	2b0 <CLEAR_03>
				STRB R6, [R1]			//Else, insert 1 byte of 0 at memory location R1	
 2ac:	e5c16000 	strb	r6, [r1]

000002b0 <CLEAR_03>:

CLEAR_03:		LSL R4, #1				//Shift R4 to check next display
 2b0:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			//Increment R1 to get the adress if next display
 2b4:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			//Decrement the loop counter
 2b8:	e2533001 	subs	r3, r3, #1
				BGT LOOP_CLEAR_03		//Keep looping in lower displays
 2bc:	cafffff6 	bgt	29c <LOOP_CLEAR_03>

000002c0 <LOOP_CLEAR_45>:

LOOP_CLEAR_45:	CMP R3, #0				//Check if finished with all displays
 2c0:	e3530000 	cmp	r3, #0
				BEQ END_CLEAR			//If so, end
 2c4:	0a000006 	beq	2e4 <END_CLEAR>
				ANDS R5, R4, R0			//Compare R0 with control to know if checked desplay needs to be cleared
 2c8:	e0145000 	ands	r5, r4, r0
				BEQ CLEAR_45			//If = 0, skip clearing
 2cc:	0a000000 	beq	2d4 <CLEAR_45>
				STRB R6, [R2]			//Else, insert 1 byte of 0 at memory location R1	
 2d0:	e5c26000 	strb	r6, [r2]

000002d4 <CLEAR_45>:

CLEAR_45:		LSL R4, #1				//Shift R4 to check next display
 2d4:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			//Increment R2 to get the adress if next display
 2d8:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1			//Decrement loop counter
 2dc:	e2533001 	subs	r3, r3, #1
				BGT LOOP_CLEAR_45		//Keep looping in upper displays
 2e0:	cafffff6 	bgt	2c0 <LOOP_CLEAR_45>

000002e4 <END_CLEAR>:

END_CLEAR:		BX LR
 2e4:	e12fff1e 	bx	lr

000002e8 <HEX_flood_ASM>:

HEX_flood_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 2e8:	e59f10cc 	ldr	r1, [pc, #204]	; 3bc <HEX_VAL+0x10>
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 2ec:	e59f20cc 	ldr	r2, [pc, #204]	; 3c0 <HEX_VAL+0x14>
				MOV R3, #6				//Loop counter
 2f0:	e3a03006 	mov	r3, #6
				MOV R4, #1				//Control that compares with R0 to check if display needs to be changed
 2f4:	e3a04001 	mov	r4, #1
				MOV R6, #0xFF			//Use R6 to flood desired 8 bits
 2f8:	e3a060ff 	mov	r6, #255	; 0xff

000002fc <LOOP_FLOOD_03>:

LOOP_FLOOD_03:	CMP R3, #2				//Checks if still in lower displays
 2fc:	e3530002 	cmp	r3, #2
				BEQ LOOP_TOP_F			//If not go to upper displays
 300:	0a000006 	beq	320 <LOOP_TOP_F>
				ANDS R5, R4, R0 		//Check which display to flood
 304:	e0145000 	ands	r5, r4, r0
				BEQ BOTTOM_F			//If = 0, no need to flood
 308:	0a000000 	beq	310 <BOTTOM_F>
				STRB R6, [R1]			//Else, flood display being checked
 30c:	e5c16000 	strb	r6, [r1]

00000310 <BOTTOM_F>:

BOTTOM_F:		LSL R4, #1				//Shit control by 1 to check next display
 310:	e1a04084 	lsl	r4, r4, #1
				ADD R1, R1, #1			//Point to the adress of next display
 314:	e2811001 	add	r1, r1, #1
				SUBS R3, R3, #1			//Decrement loop counter
 318:	e2533001 	subs	r3, r3, #1
				BGT LOOP_FLOOD_03		//Loop back to lower displays
 31c:	cafffff6 	bgt	2fc <LOOP_FLOOD_03>

00000320 <LOOP_TOP_F>:

LOOP_TOP_F:		CMP R3, #0				//Check if finished checking all displays
 320:	e3530000 	cmp	r3, #0
				BEQ END_FLOOD			//If so, end
 324:	0a000006 	beq	344 <END_FLOOD>
				ANDS R5, R4, R0			//Else, check if display needs to be flooded
 328:	e0145000 	ands	r5, r4, r0
				BEQ TOP_F				//If = 0, no need to be flooded
 32c:	0a000000 	beq	334 <TOP_F>
				STRB R6, [R2]			//Else, flood designated upper display
 330:	e5c26000 	strb	r6, [r2]

00000334 <TOP_F>:

TOP_F:			LSL R4, #1				//Shift control to point to next display
 334:	e1a04084 	lsl	r4, r4, #1
				ADD R2, R2, #1			//Point to the adress of next display
 338:	e2822001 	add	r2, r2, #1
				SUBS R3, R3, #1			//Decrement counter
 33c:	e2533001 	subs	r3, r3, #1
				BGT LOOP_TOP_F			//Loop back to upper displays
 340:	cafffff6 	bgt	320 <LOOP_TOP_F>

00000344 <END_FLOOD>:

END_FLOOD:		BX LR
 344:	e12fff1e 	bx	lr

00000348 <HEX_write_ASM>:

HEX_write_ASM:	LDR R2, =HEX_BASE1		//Contains adresses for HEX0-3
 348:	e59f206c 	ldr	r2, [pc, #108]	; 3bc <HEX_VAL+0x10>
				LDR R3, =HEX_BASE2		//Contains adresses for HEX4-5
 34c:	e59f306c 	ldr	r3, [pc, #108]	; 3c0 <HEX_VAL+0x14>
				LDR R7, =HEX_VAL		//Start adress of the list of all values for 16 hex displays
 350:	e59f706c 	ldr	r7, [pc, #108]	; 3c4 <HEX_VAL+0x18>
				LDRB R8, [R7, R1]		//Load corresponding value of val in R8
 354:	e7d78001 	ldrb	r8, [r7, r1]
				MOV R4, #6				//Loop counter
 358:	e3a04006 	mov	r4, #6
				MOV R5, #1				//Control which compares with R0 to check which hex to change
 35c:	e3a05001 	mov	r5, #1

00000360 <LOOP_W_LOWER>:

LOOP_W_LOWER:	CMP R4, #2				//Check if still in lower displays
 360:	e3540002 	cmp	r4, #2
				BEQ LOOP_W_UPPER		//If not go to upper displays
 364:	0a000006 	beq	384 <LOOP_W_UPPER>
				ANDS R6, R5, R0 		//Compare R0 to control to know if selected bit needs to be changed
 368:	e0156000 	ands	r6, r5, r0
				BEQ W_LOWER				//If = 0, no changes
 36c:	0a000000 	beq	374 <W_LOWER>
				STRB R8, [R2]			//Else, store val in corresponding display address
 370:	e5c28000 	strb	r8, [r2]

00000374 <W_LOWER>:

W_LOWER:		LSL R5, #1				//Shift control to check next display
 374:	e1a05085 	lsl	r5, r5, #1
				ADD R2, R2, #1			//Increment adress to next display
 378:	e2822001 	add	r2, r2, #1
				SUBS R4, R4, #1			//Decrement loop counter 
 37c:	e2544001 	subs	r4, r4, #1
				BGT LOOP_W_LOWER		//Go back to lower displays
 380:	cafffff6 	bgt	360 <LOOP_W_LOWER>

00000384 <LOOP_W_UPPER>:

LOOP_W_UPPER:	CMP R4, #0				//Check f all displays have been checked
 384:	e3540000 	cmp	r4, #0
				BEQ END_W				//If so, end
 388:	0a000006 	beq	3a8 <END_W>
				ANDS R6, R5, R0			//Else, check if current display needs to be changed
 38c:	e0156000 	ands	r6, r5, r0
				BEQ W_UPPER				//If not, no changes
 390:	0a000000 	beq	398 <W_UPPER>
				STRB R8, [R3]			//If so, change
 394:	e5c38000 	strb	r8, [r3]

00000398 <W_UPPER>:

W_UPPER:		LSL R5, #1				//Shift control to check next display
 398:	e1a05085 	lsl	r5, r5, #1
				ADD R3, R3, #1			//Increment adress to next display
 39c:	e2833001 	add	r3, r3, #1
				SUBS R4, R4, #1			//Decrement loop counter
 3a0:	e2544001 	subs	r4, r4, #1
				BGT LOOP_W_UPPER		//Go back to upper displays
 3a4:	cafffff6 	bgt	384 <LOOP_W_UPPER>

000003a8 <END_W>:

END_W:			BX LR
 3a8:	e12fff1e 	bx	lr

000003ac <HEX_VAL>:
 3ac:	4f5b063f 	.word	0x4f5b063f
 3b0:	077d6d66 	.word	0x077d6d66
 3b4:	7f77677f 	.word	0x7f77677f
 3b8:	71793f39 	.word	0x71793f39
	.equ HEX_BASE2, 0xFF200030
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:	LDR R1, =HEX_BASE1		//Contains adresses for HEX0-3
 3bc:	ff200020 	.word	0xff200020
				LDR R2, =HEX_BASE2		//Contains adresses for HEX4-5
 3c0:	ff200030 	.word	0xff200030

END_FLOOD:		BX LR

HEX_write_ASM:	LDR R2, =HEX_BASE1		//Contains adresses for HEX0-3
				LDR R3, =HEX_BASE2		//Contains adresses for HEX4-5
				LDR R7, =HEX_VAL		//Start adress of the list of all values for 16 hex displays
 3c4:	000003ac 	.word	0x000003ac

000003c8 <read_PB_data_ASM>:
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM

read_PB_data_ASM:				
			LDR R1, =PB_DATA	//Load adress of push button
 3c8:	e59f1084 	ldr	r1, [pc, #132]	; 454 <disable_PB_INT_ASM+0x14>
			LDR R0, [R1]		//Load data from adress in R0 
 3cc:	e5910000 	ldr	r0, [r1]
			AND R0, R0, #0xF	//Return only needed bits
 3d0:	e200000f 	and	r0, r0, #15
			BX LR				//Return R0
 3d4:	e12fff1e 	bx	lr

000003d8 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:			
			LDR R1, =PB_DATA	//Load adress of push button
 3d8:	e59f1074 	ldr	r1, [pc, #116]	; 454 <disable_PB_INT_ASM+0x14>
			LDR R1, [R1]		//Load data from adress in R1
 3dc:	e5911000 	ldr	r1, [r1]
			AND R2, R1, R0		//AND R0 and R1 to check if specific button is pressed 
 3e0:	e0012000 	and	r2, r1, r0
			CMP R2, R0			//Compare with R0 to check if button is pressed
 3e4:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		//If = , checked button is pressed
 3e8:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		//If !=, checked button is not pressed
 3ec:	13a00000 	movne	r0, #0
			BX LR
 3f0:	e12fff1e 	bx	lr

000003f4 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 3f4:	e59f105c 	ldr	r1, [pc, #92]	; 458 <disable_PB_INT_ASM+0x18>
			LDR R0, [R1]		//Load data into R0
 3f8:	e5910000 	ldr	r0, [r1]
			AND R0, R0, #0xF	//Return only needed bits
 3fc:	e200000f 	and	r0, r0, #15
			BX LR 				//Return R0
 400:	e12fff1e 	bx	lr

00000404 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:			
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 404:	e59f104c 	ldr	r1, [pc, #76]	; 458 <disable_PB_INT_ASM+0x18>
			LDR R1, [R1]		//Load value of R1
 408:	e5911000 	ldr	r1, [r1]
			AND R2, R1, R0		//AND R0 and R1 to check if specific button is pressed 
 40c:	e0012000 	and	r2, r1, r0
			CMP R2, R0			//Compare with R0 to check if button is pressed
 410:	e1520000 	cmp	r2, r0
			MOVEQ R0, #1		//If = , checked button is pressed
 414:	03a00001 	moveq	r0, #1
			MOVNE R0, #0		//If !=, checked button is not pressed
 418:	13a00000 	movne	r0, #0
			BX LR
 41c:	e12fff1e 	bx	lr

00000420 <PB_clear_edgecp_ASM>:

PB_clear_edgecp_ASM:				
			LDR R1, =PB_EDGECAP //Load adress of edgecap
 420:	e59f1030 	ldr	r1, [pc, #48]	; 458 <disable_PB_INT_ASM+0x18>
			MOV R0, #0xF		//Move all 1s in R0
 424:	e3a0000f 	mov	r0, #15
			STR R0, [R1]		//Store all 1s in adress of edgecap to reset
 428:	e5810000 	str	r0, [r1]
			BX LR		
 42c:	e12fff1e 	bx	lr

00000430 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 430:	e59f1024 	ldr	r1, [pc, #36]	; 45c <disable_PB_INT_ASM+0x1c>
			AND R2, R0, #0xF	//Return only needed bits
 434:	e200200f 	and	r2, r0, #15
			STR R2, [R1]		//Store return value in adress
 438:	e5812000 	str	r2, [r1]
			BX LR			
 43c:	e12fff1e 	bx	lr

00000440 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 440:	e59f1014 	ldr	r1, [pc, #20]	; 45c <disable_PB_INT_ASM+0x1c>
			LDR R2, [R1]		//Load value at adress in R2
 444:	e5912000 	ldr	r2, [r1]
			BIC R1, R1, R0		//Disable wanted button
 448:	e1c11000 	bic	r1, r1, r0
			STR R1, [R2]		//Store value back in adress
 44c:	e5821000 	str	r1, [r2]
			BX LR		
 450:	e12fff1e 	bx	lr
			.global PB_clear_edgecp_ASM
			.global enable_PB_INT_ASM
			.global disable_PB_INT_ASM

read_PB_data_ASM:				
			LDR R1, =PB_DATA	//Load adress of push button
 454:	ff200050 	.word	0xff200050
			MOVEQ R0, #1		//If = , checked button is pressed
			MOVNE R0, #0		//If !=, checked button is not pressed
			BX LR

read_PB_edgecap_ASM:				
			LDR R1, =PB_EDGECAP	//Load adress of edgecap
 458:	ff20005c 	.word	0xff20005c
			MOV R0, #0xF		//Move all 1s in R0
			STR R0, [R1]		//Store all 1s in adress of edgecap to reset
			BX LR		

enable_PB_INT_ASM:				
			LDR R1, =PB_MASK	//Load adress of interupt
 45c:	ff200058 	.word	0xff200058

00000460 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 460:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 464:	e3a01000 	mov	r1, #0
	MOV R2, #1
 468:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 46c:	e5907000 	ldr	r7, [r0]
	B LOOP
 470:	eaffffff 	b	474 <LOOP>

00000474 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 474:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 478:	0a000000 	beq	480 <CONTINUE>
	BL CONFIG
 47c:	eb000004 	bl	494 <CONFIG>

00000480 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 480:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 484:	e3510004 	cmp	r1, #4
	BLT LOOP
 488:	bafffff9 	blt	474 <LOOP>

0000048c <DONE>:

DONE:
	POP {R4-R7, LR}
 48c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 490:	e12fff1e 	bx	lr

00000494 <CONFIG>:


CONFIG:
	PUSH {LR}
 494:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 498:	e59f3148 	ldr	r3, [pc, #328]	; 5e8 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 49c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 4a0:	eb000005 	bl	4bc <DISABLE>
	BL SET_LOAD_VAL
 4a4:	eb000008 	bl	4cc <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 4a8:	eb00000e 	bl	4e8 <SET_LOAD_BIT>
	BL SET_INT_BIT
 4ac:	eb000013 	bl	500 <SET_INT_BIT>
	BL SET_EN_BIT
 4b0:	eb000019 	bl	51c <SET_EN_BIT>
	
	POP {LR}
 4b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 4b8:	e12fff1e 	bx	lr

000004bc <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 4bc:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 4c0:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 4c4:	e5845008 	str	r5, [r4, #8]
	BX LR
 4c8:	e12fff1e 	bx	lr

000004cc <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 4cc:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 4d0:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 4d4:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 4d8:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 4dc:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 4e0:	e5845000 	str	r5, [r4]
	BX LR
 4e4:	e12fff1e 	bx	lr

000004e8 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 4e8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 4ec:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 4f0:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 4f4:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 4f8:	e5845008 	str	r5, [r4, #8]
	BX LR
 4fc:	e12fff1e 	bx	lr

00000500 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 500:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 504:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 508:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 50c:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 510:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 514:	e5845008 	str	r5, [r4, #8]
	BX LR
 518:	e12fff1e 	bx	lr

0000051c <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 51c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 520:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 524:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 528:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 52c:	e5845008 	str	r5, [r4, #8]
	BX LR
 530:	e12fff1e 	bx	lr

00000534 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 534:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 538:	e3a01000 	mov	r1, #0
	MOV R2, #1
 53c:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 540:	eaffffff 	b	544 <CLEAR_INT_LOOP>

00000544 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 544:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 548:	0a000000 	beq	550 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 54c:	eb000005 	bl	568 <CLEAR_INT>

00000550 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 550:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 554:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 558:	bafffff9 	blt	544 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 55c:	eaffffff 	b	560 <CLEAR_INT_DONE>

00000560 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 560:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 564:	e12fff1e 	bx	lr

00000568 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 568:	e59f3078 	ldr	r3, [pc, #120]	; 5e8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 56c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 570:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 574:	e12fff1e 	bx	lr

00000578 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 578:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 57c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 580:	e3a01000 	mov	r1, #0
	MOV R2, #1
 584:	e3a02001 	mov	r2, #1
	MOV R4, #0
 588:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 58c:	eaffffff 	b	590 <READ_INT_LOOP>

00000590 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 590:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 594:	0a000000 	beq	59c <READ_INT_CONTINUE>
	BL READ_INT
 598:	eb000008 	bl	5c0 <READ_INT>

0000059c <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 59c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 5a0:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 5a4:	0a000001 	beq	5b0 <READ_INT_DONE>
	LSL R4, R4, #1
 5a8:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 5ac:	eafffff7 	b	590 <READ_INT_LOOP>

000005b0 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 5b0:	e1a00004 	mov	r0, r4
	POP {R4}
 5b4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 5b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 5bc:	e12fff1e 	bx	lr

000005c0 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 5c0:	e59f3020 	ldr	r3, [pc, #32]	; 5e8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 5c4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 5c8:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 5cc:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 5d0:	e0244003 	eor	r4, r4, r3
	BX LR
 5d4:	e12fff1e 	bx	lr

000005d8 <HPS_TIM_BASE>:
 5d8:	ffc08000 	.word	0xffc08000
 5dc:	ffc09000 	.word	0xffc09000
 5e0:	ffd00000 	.word	0xffd00000
 5e4:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 5e8:	000005d8 	.word	0x000005d8

000005ec <TIM0_FLAG>:
 5ec:	00000000 	.word	0x00000000

000005f0 <BUTTON_FLAG>:
 5f0:	00000004 	.word	0x00000004

000005f4 <A9_PRIV_TIM_ISR>:

BUTTON_FLAG:
	.word 0x4

A9_PRIV_TIM_ISR:
	BX LR
 5f4:	e12fff1e 	bx	lr

000005f8 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
 5f8:	e12fff1e 	bx	lr

000005fc <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
 5fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
 600:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
 604:	ebffffca 	bl	534 <HPS_TIM_clear_INT_ASM>

	LDR R0, =TIM0_FLAG
 608:	e59f00a4 	ldr	r0, [pc, #164]	; 6b4 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
 60c:	e3a01001 	mov	r1, #1
	STR R1, [R0]
 610:	e5801000 	str	r1, [r0]

	POP {LR}
 614:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 618:	e12fff1e 	bx	lr

0000061c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
 61c:	e12fff1e 	bx	lr

00000620 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
 620:	e12fff1e 	bx	lr

00000624 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
 624:	e12fff1e 	bx	lr

00000628 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
 628:	e12fff1e 	bx	lr

0000062c <FPGA_PB_KEYS_ISR>:

FPGA_PB_KEYS_ISR:
	PUSH {LR}
 62c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R0, =0xFF200050			//Load button adress
 630:	e59f0080 	ldr	r0, [pc, #128]	; 6b8 <FPGA_PS2_DUAL_ISR+0x8>
	LDR R1, [R0, #0xC]			//Load edgecap adress
 634:	e590100c 	ldr	r1, [r0, #12]
	STR R1, [R0, #0xC]			//Clear it 
 638:	e580100c 	str	r1, [r0, #12]
	LDR R0, =BUTTON_FLAG		//Load the flag
 63c:	e59f0078 	ldr	r0, [pc, #120]	; 6bc <FPGA_PS2_DUAL_ISR+0xc>

00000640 <PB0_CHECK>:

PB0_CHECK:
	MOV R3, #0x1				// since one hot encoded button one is at bit 1
 640:	e3a03001 	mov	r3, #1
	ANDS R3, R1 				// check if it is button 0
 644:	e0133001 	ands	r3, r3, r1
	BEQ PB1_CHECK
 648:	0a000002 	beq	658 <PB1_CHECK>
	MOV R2, #0					// return button number that was pressed
 64c:	e3a02000 	mov	r2, #0
	STR R2, [R0] 				// store it into the timer flag
 650:	e5802000 	str	r2, [r0]
	B END_PB
 654:	ea00000d 	b	690 <END_PB>

00000658 <PB1_CHECK>:
PB1_CHECK:
	MOV R3, #0x2				// encoding for pb 1
 658:	e3a03002 	mov	r3, #2
	ANDS R3, R1 				// check if button is 1
 65c:	e0133001 	ands	r3, r3, r1
	BEQ PB2_CHECK
 660:	0a000002 	beq	670 <PB2_CHECK>
	MOV R2, #1					// return button number that was pressed
 664:	e3a02001 	mov	r2, #1
	STR R2, [R0]				// store it into the timer flag
 668:	e5802000 	str	r2, [r0]
	B END_PB
 66c:	ea000007 	b	690 <END_PB>

00000670 <PB2_CHECK>:
PB2_CHECK:
	MOV R3, #0x4				// encoding for pb 2
 670:	e3a03004 	mov	r3, #4
	ANDS R3, R1 				// check if button is 2
 674:	e0133001 	ands	r3, r3, r1
	BEQ PB3_CHECK
 678:	0a000002 	beq	688 <PB3_CHECK>
	MOV R2, #2					// return button number that was pressed
 67c:	e3a02002 	mov	r2, #2
	STR R2, [R0] 				// store it into the timer flag
 680:	e5802000 	str	r2, [r0]
	B END_PB
 684:	ea000001 	b	690 <END_PB>

00000688 <PB3_CHECK>:
PB3_CHECK:
	MOV R2, #3					// return button number that was pressed
 688:	e3a02003 	mov	r2, #3
	STR R2, [R0] 				// store it into the timer flag
 68c:	e5802000 	str	r2, [r0]

00000690 <END_PB>:
END_PB:
	POP {LR}
 690:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 694:	e12fff1e 	bx	lr

00000698 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
 698:	e12fff1e 	bx	lr

0000069c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
 69c:	e12fff1e 	bx	lr

000006a0 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
 6a0:	e12fff1e 	bx	lr

000006a4 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
 6a4:	e12fff1e 	bx	lr

000006a8 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
 6a8:	e12fff1e 	bx	lr

000006ac <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
 6ac:	e12fff1e 	bx	lr

000006b0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
 6b0:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM

	LDR R0, =TIM0_FLAG
 6b4:	000005ec 	.word	0x000005ec
FPGA_INTERVAL_TIM_ISR:
	BX LR

FPGA_PB_KEYS_ISR:
	PUSH {LR}
	LDR R0, =0xFF200050			//Load button adress
 6b8:	ff200050 	.word	0xff200050
	LDR R1, [R0, #0xC]			//Load edgecap adress
	STR R1, [R0, #0xC]			//Clear it 
	LDR R0, =BUTTON_FLAG		//Load the flag
 6bc:	000005f0 	.word	0x000005f0

000006c0 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
 6c0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 6c4:	e28db000 	add	r11, sp, #0
 6c8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
 6cc:	e3a030d3 	mov	r3, #211	; 0xd3
 6d0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 6d4:	e51b3008 	ldr	r3, [r11, #-8]
 6d8:	e129f003 	msr	CPSR_fc, r3
}
 6dc:	e28bd000 	add	sp, r11, #0
 6e0:	e8bd0800 	ldmfd	sp!, {r11}
 6e4:	e12fff1e 	bx	lr

000006e8 <enable_A9_interrupts>:

void enable_A9_interrupts() {
 6e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 6ec:	e28db000 	add	r11, sp, #0
 6f0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
 6f4:	e3a03053 	mov	r3, #83	; 0x53
 6f8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
 6fc:	e51b3008 	ldr	r3, [r11, #-8]
 700:	e129f003 	msr	CPSR_fc, r3
}
 704:	e28bd000 	add	sp, r11, #0
 708:	e8bd0800 	ldmfd	sp!, {r11}
 70c:	e12fff1e 	bx	lr

00000710 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
 710:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 714:	e28db000 	add	r11, sp, #0
 718:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
 71c:	e3e03007 	mvn	r3, #7
 720:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
 724:	e3a030d2 	mov	r3, #210	; 0xd2
 728:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 72c:	e51b300c 	ldr	r3, [r11, #-12]
 730:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
 734:	e51b3008 	ldr	r3, [r11, #-8]
 738:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
 73c:	e3a030d3 	mov	r3, #211	; 0xd3
 740:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
 744:	e51b300c 	ldr	r3, [r11, #-12]
 748:	e129f003 	msr	CPSR_fc, r3
}
 74c:	e28bd000 	add	sp, r11, #0
 750:	e8bd0800 	ldmfd	sp!, {r11}
 754:	e12fff1e 	bx	lr

00000758 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
 758:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 75c:	e28db000 	add	r11, sp, #0
 760:	e24dd01c 	sub	sp, sp, #28
 764:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
 768:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
 76c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 770:	e1a031c3 	asr	r3, r3, #3
 774:	e3c33003 	bic	r3, r3, #3
 778:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
 77c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 780:	e203301f 	and	r3, r3, #31
 784:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
 788:	e3a02001 	mov	r2, #1
 78c:	e51b300c 	ldr	r3, [r11, #-12]
 790:	e1a03312 	lsl	r3, r2, r3
 794:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
 798:	e51b3008 	ldr	r3, [r11, #-8]
 79c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
 7a0:	e2433c03 	sub	r3, r3, #768	; 0x300
 7a4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
 7a8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 7ac:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 7b0:	e5921000 	ldr	r1, [r2]
 7b4:	e51b2010 	ldr	r2, [r11, #-16]
 7b8:	e1812002 	orr	r2, r1, r2
 7bc:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
 7c0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 7c4:	e3c33003 	bic	r3, r3, #3
 7c8:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
 7cc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 7d0:	e2033003 	and	r3, r3, #3
 7d4:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
 7d8:	e51b2008 	ldr	r2, [r11, #-8]
 7dc:	e51b300c 	ldr	r3, [r11, #-12]
 7e0:	e0823003 	add	r3, r2, r3
 7e4:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
 7e8:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
 7ec:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 7f0:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
 7f4:	e6ef2072 	uxtb	r2, r2
 7f8:	e5c32000 	strb	r2, [r3]
}
 7fc:	e28bd000 	add	sp, r11, #0
 800:	e8bd0800 	ldmfd	sp!, {r11}
 804:	e12fff1e 	bx	lr

00000808 <config_GIC>:

void config_GIC(int len, int* IDs) {
 808:	e92d4800 	push	{r11, lr}
 80c:	e28db004 	add	r11, sp, #4
 810:	e24dd010 	sub	sp, sp, #16
 814:	e50b0010 	str	r0, [r11, #-16]
 818:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
 81c:	e3a03000 	mov	r3, #0
 820:	e50b3008 	str	r3, [r11, #-8]
 824:	ea00000a 	b	854 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
 828:	e51b3008 	ldr	r3, [r11, #-8]
 82c:	e1a03103 	lsl	r3, r3, #2
 830:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 834:	e0823003 	add	r3, r2, r3
 838:	e5933000 	ldr	r3, [r3]
 83c:	e1a00003 	mov	r0, r3
 840:	e3a01001 	mov	r1, #1
 844:	ebffffc3 	bl	758 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
 848:	e51b3008 	ldr	r3, [r11, #-8]
 84c:	e2833001 	add	r3, r3, #1
 850:	e50b3008 	str	r3, [r11, #-8]
 854:	e51b2008 	ldr	r2, [r11, #-8]
 858:	e51b3010 	ldr	r3, [r11, #-16]
 85c:	e1520003 	cmp	r2, r3
 860:	bafffff0 	blt	828 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
 864:	e30c3104 	movw	r3, #49412	; 0xc104
 868:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 86c:	e30f2fff 	movw	r2, #65535	; 0xffff
 870:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
 874:	e3a03cc1 	mov	r3, #49408	; 0xc100
 878:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 87c:	e3a02001 	mov	r2, #1
 880:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
 884:	e3a03a0d 	mov	r3, #53248	; 0xd000
 888:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 88c:	e3a02001 	mov	r2, #1
 890:	e5832000 	str	r2, [r3]
}
 894:	e24bd004 	sub	sp, r11, #4
 898:	e8bd8800 	pop	{r11, pc}

0000089c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
 89c:	e24ee004 	sub	lr, lr, #4
 8a0:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
 8a4:	e28db018 	add	r11, sp, #24
 8a8:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
 8ac:	e30c310c 	movw	r3, #49420	; 0xc10c
 8b0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 8b4:	e5933000 	ldr	r3, [r3]
 8b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
 8bc:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
 8c0:	e3530053 	cmp	r3, #83	; 0x53
 8c4:	0a00003d 	beq	9c0 <__cs3_isr_irq+0x124>
 8c8:	e3530053 	cmp	r3, #83	; 0x53
 8cc:	ca000011 	bgt	918 <__cs3_isr_irq+0x7c>
 8d0:	e353004e 	cmp	r3, #78	; 0x4e
 8d4:	0a000031 	beq	9a0 <__cs3_isr_irq+0x104>
 8d8:	e353004e 	cmp	r3, #78	; 0x4e
 8dc:	ca000006 	bgt	8fc <__cs3_isr_irq+0x60>
 8e0:	e3530048 	cmp	r3, #72	; 0x48
 8e4:	0a000029 	beq	990 <__cs3_isr_irq+0xf4>
 8e8:	e3530049 	cmp	r3, #73	; 0x49
 8ec:	0a000029 	beq	998 <__cs3_isr_irq+0xfc>
 8f0:	e353001d 	cmp	r3, #29
 8f4:	0a000019 	beq	960 <__cs3_isr_irq+0xc4>
 8f8:	ea000036 	b	9d8 <__cs3_isr_irq+0x13c>
 8fc:	e3530050 	cmp	r3, #80	; 0x50
 900:	0a00002a 	beq	9b0 <__cs3_isr_irq+0x114>
 904:	e3530050 	cmp	r3, #80	; 0x50
 908:	ba000026 	blt	9a8 <__cs3_isr_irq+0x10c>
 90c:	e3530051 	cmp	r3, #81	; 0x51
 910:	0a000028 	beq	9b8 <__cs3_isr_irq+0x11c>
 914:	ea00002f 	b	9d8 <__cs3_isr_irq+0x13c>
 918:	e35300c7 	cmp	r3, #199	; 0xc7
 91c:	0a000013 	beq	970 <__cs3_isr_irq+0xd4>
 920:	e35300c7 	cmp	r3, #199	; 0xc7
 924:	ca000006 	bgt	944 <__cs3_isr_irq+0xa8>
 928:	e3530059 	cmp	r3, #89	; 0x59
 92c:	0a000027 	beq	9d0 <__cs3_isr_irq+0x134>
 930:	e35300c5 	cmp	r3, #197	; 0xc5
 934:	0a00000b 	beq	968 <__cs3_isr_irq+0xcc>
 938:	e3530054 	cmp	r3, #84	; 0x54
 93c:	0a000021 	beq	9c8 <__cs3_isr_irq+0x12c>
 940:	ea000024 	b	9d8 <__cs3_isr_irq+0x13c>
 944:	e35300c9 	cmp	r3, #201	; 0xc9
 948:	0a00000c 	beq	980 <__cs3_isr_irq+0xe4>
 94c:	e35300c9 	cmp	r3, #201	; 0xc9
 950:	ba000008 	blt	978 <__cs3_isr_irq+0xdc>
 954:	e35300ca 	cmp	r3, #202	; 0xca
 958:	0a00000a 	beq	988 <__cs3_isr_irq+0xec>
 95c:	ea00001d 	b	9d8 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
 960:	ebffff23 	bl	5f4 <A9_PRIV_TIM_ISR>
 964:	ea00001c 	b	9dc <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
 968:	ebffff22 	bl	5f8 <HPS_GPIO1_ISR>
 96c:	ea00001a 	b	9dc <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
 970:	ebffff21 	bl	5fc <HPS_TIM0_ISR>
 974:	ea000018 	b	9dc <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
 978:	ebffff27 	bl	61c <HPS_TIM1_ISR>
 97c:	ea000016 	b	9dc <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
 980:	ebffff26 	bl	620 <HPS_TIM2_ISR>
 984:	ea000014 	b	9dc <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
 988:	ebffff25 	bl	624 <HPS_TIM3_ISR>
 98c:	ea000012 	b	9dc <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
 990:	ebffff24 	bl	628 <FPGA_INTERVAL_TIM_ISR>
 994:	ea000010 	b	9dc <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
 998:	ebffff23 	bl	62c <FPGA_PB_KEYS_ISR>
 99c:	ea00000e 	b	9dc <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
 9a0:	ebffff3c 	bl	698 <FPGA_Audio_ISR>
 9a4:	ea00000c 	b	9dc <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
 9a8:	ebffff3b 	bl	69c <FPGA_PS2_ISR>
 9ac:	ea00000a 	b	9dc <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
 9b0:	ebffff3a 	bl	6a0 <FPGA_JTAG_ISR>
 9b4:	ea000008 	b	9dc <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
 9b8:	ebffff39 	bl	6a4 <FPGA_IrDA_ISR>
 9bc:	ea000006 	b	9dc <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
 9c0:	ebffff38 	bl	6a8 <FPGA_JP1_ISR>
 9c4:	ea000004 	b	9dc <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
 9c8:	ebffff37 	bl	6ac <FPGA_JP2_ISR>
 9cc:	ea000002 	b	9dc <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
 9d0:	ebffff36 	bl	6b0 <FPGA_PS2_DUAL_ISR>
 9d4:	ea000000 	b	9dc <__cs3_isr_irq+0x140>
	
		default: while(1); break;
 9d8:	eafffffe 	b	9d8 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
 9dc:	e30c3110 	movw	r3, #49424	; 0xc110
 9e0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 9e4:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
 9e8:	e5832000 	str	r2, [r3]
}
 9ec:	e24bd018 	sub	sp, r11, #24
 9f0:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

000009f4 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
 9f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 9f8:	e28db000 	add	r11, sp, #0
	while(1);
 9fc:	eafffffe 	b	9fc <__cs3_reset+0x8>

00000a00 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
 a00:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a04:	e28db000 	add	r11, sp, #0
	while(1);
 a08:	eafffffe 	b	a08 <__cs3_isr_undef+0x8>

00000a0c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
 a0c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a10:	e28db000 	add	r11, sp, #0
	while(1);
 a14:	eafffffe 	b	a14 <__cs3_isr_swi+0x8>

00000a18 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
 a18:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a1c:	e28db000 	add	r11, sp, #0
	while(1);
 a20:	eafffffe 	b	a20 <__cs3_isr_pabort+0x8>

00000a24 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
 a24:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a28:	e28db000 	add	r11, sp, #0
	while(1);
 a2c:	eafffffe 	b	a2c <__cs3_isr_dabort+0x8>

00000a30 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
 a30:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a34:	e28db000 	add	r11, sp, #0
	while(1);
 a38:	eafffffe 	b	a38 <__cs3_isr_fiq+0x8>

00000a3c <fix_bug>:
}

void fix_bug() {
 a3c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a40:	e28db000 	add	r11, sp, #0
 a44:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
 a48:	e30d3198 	movw	r3, #53656	; 0xd198
 a4c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
 a50:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
 a54:	e51b3008 	ldr	r3, [r11, #-8]
 a58:	e3a02703 	mov	r2, #786432	; 0xc0000
 a5c:	e5832000 	str	r2, [r3]
}
 a60:	e28bd000 	add	sp, r11, #0
 a64:	e8bd0800 	ldmfd	sp!, {r11}
 a68:	e12fff1e 	bx	lr

00000a6c <int_setup>:

void int_setup(int len, int* IDs) {
 a6c:	e92d4800 	push	{r11, lr}
 a70:	e28db004 	add	r11, sp, #4
 a74:	e24dd008 	sub	sp, sp, #8
 a78:	e50b0008 	str	r0, [r11, #-8]
 a7c:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
 a80:	ebffff0e 	bl	6c0 <disable_A9_interrupts>
	set_A9_IRQ_stack();
 a84:	ebffff21 	bl	710 <set_A9_IRQ_stack>
	fix_bug();
 a88:	ebffffeb 	bl	a3c <fix_bug>
	config_GIC(len, IDs);
 a8c:	e51b0008 	ldr	r0, [r11, #-8]
 a90:	e51b100c 	ldr	r1, [r11, #-12]
 a94:	ebffff5b 	bl	808 <config_GIC>
	enable_A9_interrupts();
 a98:	ebffff12 	bl	6e8 <enable_A9_interrupts>
}
 a9c:	e24bd004 	sub	sp, r11, #4
 aa0:	e8bd8800 	pop	{r11, pc}

00000aa4 <main>:
#include "./drivers/inc/LEDs.h"			
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main () {
 aa4:	e92d4800 	push	{r11, lr}
 aa8:	e28db004 	add	r11, sp, #4
 aac:	e24dd010 	sub	sp, sp, #16

	while(1) {											
		int switches = read_slider_switches_ASM();  	//Read switches
 ab0:	ebfffdf0 	bl	278 <read_slider_switches_ASM>
 ab4:	e50b0008 	str	r0, [r11, #-8]
		write_LEDs_ASM(switches);						//Write value of switches in LEDs to turn on associated ones
 ab8:	e51b0008 	ldr	r0, [r11, #-8]
 abc:	ebfffde9 	bl	268 <write_LEDs_ASM>
		if(0x200 & switches){							//If the 9nth switch is on, clear everything
 ac0:	e51b3008 	ldr	r3, [r11, #-8]
 ac4:	e2033c02 	and	r3, r3, #512	; 0x200
 ac8:	e3530000 	cmp	r3, #0
 acc:	0a000002 	beq	adc <main+0x38>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 ad0:	e3a0003f 	mov	r0, #63	; 0x3f
 ad4:	ebfffdeb 	bl	288 <HEX_clear_ASM>
			int number = 0xF & switches;				//Read number to be displayed
			int display = 0xF & read_PB_data_ASM();		//Check which display to use
			HEX_write_ASM(display, number);				//Write value on used display
			HEX_flood_ASM(HEX4 | HEX5);					//Turn 4 and 5 on always
		}
	}
 ad8:	eafffff4 	b	ab0 <main+0xc>
		int switches = read_slider_switches_ASM();  	//Read switches
		write_LEDs_ASM(switches);						//Write value of switches in LEDs to turn on associated ones
		if(0x200 & switches){							//If the 9nth switch is on, clear everything
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
		} else {
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3);	//clear 0, 1, 2, 3 
 adc:	e3a0000f 	mov	r0, #15
 ae0:	ebfffde8 	bl	288 <HEX_clear_ASM>
			int number = 0xF & switches;				//Read number to be displayed
 ae4:	e51b3008 	ldr	r3, [r11, #-8]
 ae8:	e203300f 	and	r3, r3, #15
 aec:	e50b300c 	str	r3, [r11, #-12]
			int display = 0xF & read_PB_data_ASM();		//Check which display to use
 af0:	ebfffe34 	bl	3c8 <read_PB_data_ASM>
 af4:	e1a03000 	mov	r3, r0
 af8:	e203300f 	and	r3, r3, #15
 afc:	e50b3010 	str	r3, [r11, #-16]
			HEX_write_ASM(display, number);				//Write value on used display
 b00:	e51b3010 	ldr	r3, [r11, #-16]
 b04:	e6ef2073 	uxtb	r2, r3
 b08:	e51b300c 	ldr	r3, [r11, #-12]
 b0c:	e6ef3073 	uxtb	r3, r3
 b10:	e1a00002 	mov	r0, r2
 b14:	e1a01003 	mov	r1, r3
 b18:	ebfffe0a 	bl	348 <HEX_write_ASM>
			HEX_flood_ASM(HEX4 | HEX5);					//Turn 4 and 5 on always
 b1c:	e3a00030 	mov	r0, #48	; 0x30
 b20:	ebfffdf0 	bl	2e8 <HEX_flood_ASM>
		}
	}
 b24:	eaffffe1 	b	ab0 <main+0xc>

00000b28 <atexit>:
 b28:	e1a01000 	mov	r1, r0
 b2c:	e3a00000 	mov	r0, #0
 b30:	e92d4008 	push	{r3, lr}
 b34:	e1a02000 	mov	r2, r0
 b38:	e1a03000 	mov	r3, r0
 b3c:	eb00000e 	bl	b7c <__register_exitproc>
 b40:	e8bd4008 	pop	{r3, lr}
 b44:	e12fff1e 	bx	lr

00000b48 <exit>:
 b48:	e92d4008 	push	{r3, lr}
 b4c:	e3a01000 	mov	r1, #0
 b50:	e1a04000 	mov	r4, r0
 b54:	eb000045 	bl	c70 <__call_exitprocs>
 b58:	e59f3018 	ldr	r3, [pc, #24]	; b78 <exit+0x30>
 b5c:	e5930000 	ldr	r0, [r3]
 b60:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 b64:	e3530000 	cmp	r3, #0
 b68:	11a0e00f 	movne	lr, pc
 b6c:	112fff13 	bxne	r3
 b70:	e1a00004 	mov	r0, r4
 b74:	eb0000c9 	bl	ea0 <_exit>
 b78:	00000f48 	.word	0x00000f48

00000b7c <__register_exitproc>:
 b7c:	e59fc0e4 	ldr	r12, [pc, #228]	; c68 <__register_exitproc+0xec>
 b80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 b84:	e59c4000 	ldr	r4, [r12]
 b88:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 b8c:	e35c0000 	cmp	r12, #0
 b90:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 b94:	e59c5004 	ldr	r5, [r12, #4]
 b98:	0584c148 	streq	r12, [r4, #328]	; 0x148
 b9c:	e355001f 	cmp	r5, #31
 ba0:	e24dd010 	sub	sp, sp, #16
 ba4:	e1a06000 	mov	r6, r0
 ba8:	da000015 	ble	c04 <__register_exitproc+0x88>
 bac:	e59f00b8 	ldr	r0, [pc, #184]	; c6c <__register_exitproc+0xf0>
 bb0:	e3500000 	cmp	r0, #0
 bb4:	1a000001 	bne	bc0 <__register_exitproc+0x44>
 bb8:	e3e00000 	mvn	r0, #0
 bbc:	ea000018 	b	c24 <__register_exitproc+0xa8>
 bc0:	e3a00e19 	mov	r0, #400	; 0x190
 bc4:	e58d100c 	str	r1, [sp, #12]
 bc8:	e58d2008 	str	r2, [sp, #8]
 bcc:	e58d3004 	str	r3, [sp, #4]
 bd0:	e320f000 	nop	{0}
 bd4:	e250c000 	subs	r12, r0, #0
 bd8:	e59d100c 	ldr	r1, [sp, #12]
 bdc:	e59d2008 	ldr	r2, [sp, #8]
 be0:	e59d3004 	ldr	r3, [sp, #4]
 be4:	0afffff3 	beq	bb8 <__register_exitproc+0x3c>
 be8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 bec:	e3a00000 	mov	r0, #0
 bf0:	e58c0004 	str	r0, [r12, #4]
 bf4:	e58c5000 	str	r5, [r12]
 bf8:	e584c148 	str	r12, [r4, #328]	; 0x148
 bfc:	e58c0188 	str	r0, [r12, #392]	; 0x188
 c00:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 c04:	e3560000 	cmp	r6, #0
 c08:	e59c4004 	ldr	r4, [r12, #4]
 c0c:	1a000007 	bne	c30 <__register_exitproc+0xb4>
 c10:	e2843002 	add	r3, r4, #2
 c14:	e2844001 	add	r4, r4, #1
 c18:	e78c1103 	str	r1, [r12, r3, lsl #2]
 c1c:	e58c4004 	str	r4, [r12, #4]
 c20:	e3a00000 	mov	r0, #0
 c24:	e28dd010 	add	sp, sp, #16
 c28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 c2c:	e12fff1e 	bx	lr
 c30:	e3a00001 	mov	r0, #1
 c34:	e1a00410 	lsl	r0, r0, r4
 c38:	e08c8104 	add	r8, r12, r4, lsl #2
 c3c:	e3560002 	cmp	r6, #2
 c40:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 c44:	e5883108 	str	r3, [r8, #264]	; 0x108
 c48:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 c4c:	e1877000 	orr	r7, r7, r0
 c50:	01830000 	orreq	r0, r3, r0
 c54:	e1a05008 	mov	r5, r8
 c58:	e5882088 	str	r2, [r8, #136]	; 0x88
 c5c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 c60:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 c64:	eaffffe9 	b	c10 <__register_exitproc+0x94>
 c68:	00000f48 	.word	0x00000f48
 c6c:	00000000 	.word	0x00000000

00000c70 <__call_exitprocs>:
 c70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 c74:	e59f3168 	ldr	r3, [pc, #360]	; de4 <__call_exitprocs+0x174>
 c78:	e5933000 	ldr	r3, [r3]
 c7c:	e24dd014 	sub	sp, sp, #20
 c80:	e58d3004 	str	r3, [sp, #4]
 c84:	e2833f52 	add	r3, r3, #328	; 0x148
 c88:	e58d0008 	str	r0, [sp, #8]
 c8c:	e58d300c 	str	r3, [sp, #12]
 c90:	e1a07001 	mov	r7, r1
 c94:	e3a08001 	mov	r8, #1
 c98:	e59d3004 	ldr	r3, [sp, #4]
 c9c:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 ca0:	e3560000 	cmp	r6, #0
 ca4:	e59db00c 	ldr	r11, [sp, #12]
 ca8:	0a000033 	beq	d7c <__call_exitprocs+0x10c>
 cac:	e5965004 	ldr	r5, [r6, #4]
 cb0:	e2554001 	subs	r4, r5, #1
 cb4:	5286a088 	addpl	r10, r6, #136	; 0x88
 cb8:	5285501f 	addpl	r5, r5, #31
 cbc:	508a5105 	addpl	r5, r10, r5, lsl #2
 cc0:	5a000007 	bpl	ce4 <__call_exitprocs+0x74>
 cc4:	ea000029 	b	d70 <__call_exitprocs+0x100>
 cc8:	e5953000 	ldr	r3, [r5]
 ccc:	e1530007 	cmp	r3, r7
 cd0:	0a000005 	beq	cec <__call_exitprocs+0x7c>
 cd4:	e2444001 	sub	r4, r4, #1
 cd8:	e3740001 	cmn	r4, #1
 cdc:	e2455004 	sub	r5, r5, #4
 ce0:	0a000022 	beq	d70 <__call_exitprocs+0x100>
 ce4:	e3570000 	cmp	r7, #0
 ce8:	1afffff6 	bne	cc8 <__call_exitprocs+0x58>
 cec:	e5963004 	ldr	r3, [r6, #4]
 cf0:	e06a2005 	rsb	r2, r10, r5
 cf4:	e2433001 	sub	r3, r3, #1
 cf8:	e0862002 	add	r2, r6, r2
 cfc:	e1530004 	cmp	r3, r4
 d00:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 d04:	13a01000 	movne	r1, #0
 d08:	05864004 	streq	r4, [r6, #4]
 d0c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 d10:	e3530000 	cmp	r3, #0
 d14:	0affffee 	beq	cd4 <__call_exitprocs+0x64>
 d18:	e1a02418 	lsl	r2, r8, r4
 d1c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 d20:	e1120001 	tst	r2, r1
 d24:	e5969004 	ldr	r9, [r6, #4]
 d28:	0a000016 	beq	d88 <__call_exitprocs+0x118>
 d2c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 d30:	e1120001 	tst	r2, r1
 d34:	1a000016 	bne	d94 <__call_exitprocs+0x124>
 d38:	e59d0008 	ldr	r0, [sp, #8]
 d3c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 d40:	e1a0e00f 	mov	lr, pc
 d44:	e12fff13 	bx	r3
 d48:	e5963004 	ldr	r3, [r6, #4]
 d4c:	e1530009 	cmp	r3, r9
 d50:	1affffd0 	bne	c98 <__call_exitprocs+0x28>
 d54:	e59b3000 	ldr	r3, [r11]
 d58:	e1530006 	cmp	r3, r6
 d5c:	1affffcd 	bne	c98 <__call_exitprocs+0x28>
 d60:	e2444001 	sub	r4, r4, #1
 d64:	e3740001 	cmn	r4, #1
 d68:	e2455004 	sub	r5, r5, #4
 d6c:	1affffdc 	bne	ce4 <__call_exitprocs+0x74>
 d70:	e59f1070 	ldr	r1, [pc, #112]	; de8 <__call_exitprocs+0x178>
 d74:	e3510000 	cmp	r1, #0
 d78:	1a000009 	bne	da4 <__call_exitprocs+0x134>
 d7c:	e28dd014 	add	sp, sp, #20
 d80:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 d84:	e12fff1e 	bx	lr
 d88:	e1a0e00f 	mov	lr, pc
 d8c:	e12fff13 	bx	r3
 d90:	eaffffec 	b	d48 <__call_exitprocs+0xd8>
 d94:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 d98:	e1a0e00f 	mov	lr, pc
 d9c:	e12fff13 	bx	r3
 da0:	eaffffe8 	b	d48 <__call_exitprocs+0xd8>
 da4:	e5963004 	ldr	r3, [r6, #4]
 da8:	e3530000 	cmp	r3, #0
 dac:	e5963000 	ldr	r3, [r6]
 db0:	1a000008 	bne	dd8 <__call_exitprocs+0x168>
 db4:	e3530000 	cmp	r3, #0
 db8:	0a000006 	beq	dd8 <__call_exitprocs+0x168>
 dbc:	e1a00006 	mov	r0, r6
 dc0:	e58b3000 	str	r3, [r11]
 dc4:	e320f000 	nop	{0}
 dc8:	e59b6000 	ldr	r6, [r11]
 dcc:	e3560000 	cmp	r6, #0
 dd0:	1affffb5 	bne	cac <__call_exitprocs+0x3c>
 dd4:	eaffffe8 	b	d7c <__call_exitprocs+0x10c>
 dd8:	e1a0b006 	mov	r11, r6
 ddc:	e1a06003 	mov	r6, r3
 de0:	eafffff9 	b	dcc <__call_exitprocs+0x15c>
 de4:	00000f48 	.word	0x00000f48
 de8:	00000000 	.word	0x00000000

00000dec <register_fini>:
 dec:	e92d4008 	push	{r3, lr}
 df0:	e59f3010 	ldr	r3, [pc, #16]	; e08 <register_fini+0x1c>
 df4:	e3530000 	cmp	r3, #0
 df8:	159f000c 	ldrne	r0, [pc, #12]	; e0c <register_fini+0x20>
 dfc:	1bffff49 	blne	b28 <atexit>
 e00:	e8bd4008 	pop	{r3, lr}
 e04:	e12fff1e 	bx	lr
 e08:	00000f70 	.word	0x00000f70
 e0c:	00000e10 	.word	0x00000e10

00000e10 <__libc_fini_array>:
 e10:	e92d4038 	push	{r3, r4, r5, lr}
 e14:	e59f5030 	ldr	r5, [pc, #48]	; e4c <__libc_fini_array+0x3c>
 e18:	e59f4030 	ldr	r4, [pc, #48]	; e50 <__libc_fini_array+0x40>
 e1c:	e0654004 	rsb	r4, r5, r4
 e20:	e1b04144 	asrs	r4, r4, #2
 e24:	10855104 	addne	r5, r5, r4, lsl #2
 e28:	0a000004 	beq	e40 <__libc_fini_array+0x30>
 e2c:	e5353004 	ldr	r3, [r5, #-4]!
 e30:	e1a0e00f 	mov	lr, pc
 e34:	e12fff13 	bx	r3
 e38:	e2544001 	subs	r4, r4, #1
 e3c:	1afffffa 	bne	e2c <__libc_fini_array+0x1c>
 e40:	eb00004a 	bl	f70 <__libc_fini>
 e44:	e8bd4038 	pop	{r3, r4, r5, lr}
 e48:	e12fff1e 	bx	lr
 e4c:	00000f88 	.word	0x00000f88
 e50:	00000f8c 	.word	0x00000f8c

00000e54 <__cs3_premain>:
 e54:	e92d4008 	push	{r3, lr}
 e58:	eb000017 	bl	ebc <__libc_init_array>
 e5c:	e59f3030 	ldr	r3, [pc, #48]	; e94 <__cs3_premain+0x40>
 e60:	e3530000 	cmp	r3, #0
 e64:	15930000 	ldrne	r0, [r3]
 e68:	01a00003 	moveq	r0, r3
 e6c:	e59f3024 	ldr	r3, [pc, #36]	; e98 <__cs3_premain+0x44>
 e70:	e3530000 	cmp	r3, #0
 e74:	15931000 	ldrne	r1, [r3]
 e78:	01a01003 	moveq	r1, r3
 e7c:	e3a02000 	mov	r2, #0
 e80:	ebffff07 	bl	aa4 <main>
 e84:	e59f3010 	ldr	r3, [pc, #16]	; e9c <__cs3_premain+0x48>
 e88:	e3530000 	cmp	r3, #0
 e8c:	1bffff2d 	blne	b48 <exit>
 e90:	eafffffe 	b	e90 <__cs3_premain+0x3c>
	...
 e9c:	00000b48 	.word	0x00000b48

00000ea0 <_exit>:
 ea0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ea4:	e3a00018 	mov	r0, #24
 ea8:	e59f1004 	ldr	r1, [pc, #4]	; eb4 <_exit+0x14>
 eac:	ef123456 	svc	0x00123456
 eb0:	eafffffe 	b	eb0 <_exit+0x10>
 eb4:	00020026 	.word	0x00020026

00000eb8 <__cs3_isr_interrupt>:
 eb8:	eafffffe 	b	eb8 <__cs3_isr_interrupt>

00000ebc <__libc_init_array>:
 ebc:	e92d4070 	push	{r4, r5, r6, lr}
 ec0:	e59f506c 	ldr	r5, [pc, #108]	; f34 <__libc_init_array+0x78>
 ec4:	e59f606c 	ldr	r6, [pc, #108]	; f38 <__libc_init_array+0x7c>
 ec8:	e0656006 	rsb	r6, r5, r6
 ecc:	e1b06146 	asrs	r6, r6, #2
 ed0:	12455004 	subne	r5, r5, #4
 ed4:	13a04000 	movne	r4, #0
 ed8:	0a000005 	beq	ef4 <__libc_init_array+0x38>
 edc:	e5b53004 	ldr	r3, [r5, #4]!
 ee0:	e2844001 	add	r4, r4, #1
 ee4:	e1a0e00f 	mov	lr, pc
 ee8:	e12fff13 	bx	r3
 eec:	e1560004 	cmp	r6, r4
 ef0:	1afffff9 	bne	edc <__libc_init_array+0x20>
 ef4:	e59f5040 	ldr	r5, [pc, #64]	; f3c <__libc_init_array+0x80>
 ef8:	e59f6040 	ldr	r6, [pc, #64]	; f40 <__libc_init_array+0x84>
 efc:	e0656006 	rsb	r6, r5, r6
 f00:	eb000012 	bl	f50 <_init>
 f04:	e1b06146 	asrs	r6, r6, #2
 f08:	12455004 	subne	r5, r5, #4
 f0c:	13a04000 	movne	r4, #0
 f10:	0a000005 	beq	f2c <__libc_init_array+0x70>
 f14:	e5b53004 	ldr	r3, [r5, #4]!
 f18:	e2844001 	add	r4, r4, #1
 f1c:	e1a0e00f 	mov	lr, pc
 f20:	e12fff13 	bx	r3
 f24:	e1560004 	cmp	r6, r4
 f28:	1afffff9 	bne	f14 <__libc_init_array+0x58>
 f2c:	e8bd4070 	pop	{r4, r5, r6, lr}
 f30:	e12fff1e 	bx	lr
 f34:	00000f68 	.word	0x00000f68
 f38:	00000f68 	.word	0x00000f68
 f3c:	00000f68 	.word	0x00000f68
 f40:	00000f70 	.word	0x00000f70

Disassembly of section .rodata:

00000f48 <_global_impure_ptr>:
 f48:	00000fb0 00000043                       ....C...

00000f50 <_init>:
 f50:	e1a0c00d 	mov	r12, sp
 f54:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f58:	e24cb004 	sub	r11, r12, #4
 f5c:	e24bd028 	sub	sp, r11, #40	; 0x28
 f60:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f64:	e12fff1e 	bx	lr

00000f68 <__init_array_start>:
 f68:	00000dec 	.word	0x00000dec

00000f6c <__frame_dummy_init_array_entry>:
 f6c:	00000208                                ....

00000f70 <__libc_fini>:
 f70:	e1a0c00d 	mov	r12, sp
 f74:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 f78:	e24cb004 	sub	r11, r12, #4
 f7c:	e24bd028 	sub	sp, r11, #40	; 0x28
 f80:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 f84:	e12fff1e 	bx	lr

00000f88 <__fini_array_start>:
 f88:	000001c4 	.word	0x000001c4

00000f8c <__cs3_regions>:
 f8c:	00000000 	.word	0x00000000
 f90:	00000040 	.word	0x00000040
 f94:	00000040 	.word	0x00000040
 f98:	000013a0 	.word	0x000013a0
 f9c:	00000020 	.word	0x00000020
